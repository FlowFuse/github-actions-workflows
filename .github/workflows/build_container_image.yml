name: Build container image

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Name of the image to build'
        required: true
        type: string
      package_dependencies:
        description: 'List of dependencies to update'
        type: string
        required: false
        default: ''
      build_context:
        description: 'Path to the build context'
        type: string
        required: true
      build_platforms:
          description: 'Platforms to build the image for'
          type: string
          required: false
          default: |- 
            linux/amd64
            linux/arm64
      dockerfile_path:
        description: 'Path to the Dockerfile, within $build_context, used for image build'
        type: string
        required: false
        default: 'Dockerfile'
      push_image:
        type: boolean
        default: true

jobs:
  container:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Set release name and image tag
        run: | 
          echo "release_name=nightly" >> $GITHUB_ENV
          echo "npm_registry=https://npm.pkg.github.com" >> $GITHUB_ENV
          echo "image_tag=nightly-$(date +%Y%m%d%H%m%S)" >> $GITHUB_ENV

      - name: Set dependecies versions
        if: ${{ inputs.package_dependencies != '' }}
        working-directory: ${{ inputs.build_context }}
        run: |
          for dependency in $(echo "${{ inputs.package_dependencies }}" | tr '\n' ' ')
          do
            echo "Updating $dependency to ${{ env.release_name }}"
            cat package.json | jq ".dependencies[\"$dependency\"] = \"${{ env.release_name }}\"" > package.json-patched
            mv package.json-patched package.json
          done
          cat package.json
      
      - name: Build container image
        uses: docker/build-push-action@v4
        with:
          context: ${{ inputs.build_context }}
          file: "${{ inputs.build_context }}/${{ inputs.dockerfile_path }}"
          tags: "${{ inputs.image_name }}:${{ env.image_tag }}"
          platforms: ${{ inputs.platforms }}
          build-args: |
            REGISTRY=${{ env.npm_registry }}
            REGISTRY_TOKEN=${{ secrets.GITHUB_TOKEN }}
          load: true
          push: false
          
      - name: Scan container image for vulnerabilities
        uses: flowforge/github-actions-workflows/actions/scan_container_image@main
        with:
          image_ref: "${{ inputs.image_name }}:${{ env.image_tag }}"

      - name: Save and gzip container image
        run: |
          docker save --output "${{ github.workspace }}/${{ inputs.image_name }}.image.tar" "${{ inputs.image_name }}:${{ env.image_tag }}"
          gzip "${{ github.workspace }}/${{ inputs.serviceName }}.image.tar"

      - name: Publish container image as artifact
        if: ${{ github.event_name == 'workflow_dispatch' || github.ref == 'refs/heads/main' }}
        uses: actions/upload-artifact@v3.1.2
        with:
          name: ${{ inputs.image_name }}
          path: "${{ github.workspace }}/${{ inputs.image_name }}.image.tar.gz"
      