name: Build container image

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Name of the image to build'
        required: true
        type: string
      image_tag_prefix:
        description: 'Prefix for the image tag'
        required: false
        type: string
        default: ''
      package_dependencies:
        description: 'List of dependencies to update'
        type: string
        required: false
        default: ''
      build_context:
        description: 'Path to the build context'
        type: string
        required: true
      build_platforms:
        description: 'Platforms to build the image for'
        type: string
        required: false
        default: '["linux/amd64","linux/arm64"]'
      dockerfile_path:
        description: 'Path to the Dockerfile, within $build_context, used for image build'
        type: string
        required: false
        default: 'Dockerfile'
      npm_registry_url:
        description: 'NPM registry URL'
        type: string
        required: false
        default: registry.npmjs.org
      aws_access_key_id:
        description: 'AWS access key ID'
        type: string
        required: false
      scan_image:
        description: 'Scan the image for vulnerabilities'
        type: boolean
        default: false
    secrets:
      npm_registry_auth_token:
        description: 'NPM registry authentication token'
        required: false
      temporary_registry_token:
        description: 'GitHub token'
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        platform: ${{ fromJson(inputs.build_platforms) }}
    permissions:
      packages: write
      contents: write
      checks: write
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup QEMU
        uses: docker/setup-qemu-action@v2

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

      - name: Set release name and image tag
        run: | 
          echo "release_name=nightly" >> $GITHUB_ENV
          echo "platform_tag=$( echo ${{ matrix.platform }} | tr '/' '-' )" >> $GITHUB_ENV
          echo "repository_owner_lower=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV
          
      - name: Set build tag
        if: |
          env.release_name == 'nightly' &&
          inputs.image_name == 'node-red'
        run:
          if [ "${{ env.release_name }}" == "nightly" ]; then
            echo "build_tag=nightly" >> $GITHUB_ENV ;
          else
            echo "build_tag=latest" >> $GITHUB_ENV ;
          fi

      - name: Set dependecies versions
        if: ${{ inputs.package_dependencies != '' }}
        working-directory: ${{ inputs.build_context }}
        run: |
          for dependency in $(echo "${{ inputs.package_dependencies }}" | tr '\n' ' ')
          do
            echo "Updating $dependency to ${{ env.release_name }}"
            cat package.json | jq ".dependencies[\"$dependency\"] = \"${{ env.release_name }}\"" > package.json-patched
            mv package.json-patched package.json
          done
          cat package.json
      
      - name: Login to temporary registry
        id: ghcr
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{github.actor}}
          password: ${{secrets.temporary_registry_token}}

      - name: Build container image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: ${{ inputs.build_context }}
          file: "${{ inputs.build_context }}/${{ inputs.dockerfile_path }}"
          tags: "ghcr.io/${{ env.repository_owner_lower }}/${{ inputs.image_name }}:${{ inputs.image_tag_prefix }}main-${{ env.platform_tag }}"
          platforms: ${{ matrix.platform }}
          push: true
          provenance: false
          build-args: |
            BUILD_TAG=${{ env.build_tag }}

      - name: Pull image
        run: |
          docker pull "ghcr.io/${{ env.repository_owner_lower }}/${{ inputs.image_name }}:${{ inputs.image_tag_prefix }}main-${{ env.platform_tag }}"
      
      - name: List images
        run: docker images
      
      - name: Scan container image for vulnerabilities
        if: ${{ fromJson(inputs.scan_image) }}
        uses: flowforge/github-actions-workflows/actions/scan_container_image@main
        with:
          image_ref: "ghcr.io/${{ env.repository_owner_lower }}/${{ inputs.image_name }}:${{ inputs.image_tag_prefix }}main-${{ env.platform_tag }}"
